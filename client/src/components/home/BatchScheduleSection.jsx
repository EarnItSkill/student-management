import {
  ArrowRight,
  BookOpen,
  Calendar,
  DollarSign,
  GraduationCap,
  Sparkles,
  Users,
} from "lucide-react";
import { Link } from "react-router-dom";
import { useAppContext } from "../../context/useAppContext";

// ‡¶∏‡¶ï‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶ß‡¶∞‡¶® (batchType) ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá
const aggregateBatchData = (batches, enrollments, quizzes) => {
  const aggregatedData = {};

  batches.forEach((batch) => {
    const type = batch.batchType;
    const batchId = batch._id;
    const courseId = batch.courseId;

    if (!aggregatedData[type]) {
      aggregatedData[type] = {
        type,
        courseId,
        totalEnrolled: 0,
        totalBatches: 0,
        minFee: Infinity,
        batchIds: [],
        // ‡¶™‡ßÅ‡¶∞‡¶æ‡¶§‡¶® ‡¶ï‡¶Æ‡¶® ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤/‡¶®‡¶æ‡¶Æ‡¶ï‡¶∞‡¶£
        ...getBatchTypeStyle(type),
      };
    }

    // ‡¶è‡¶®‡¶∞‡ßã‡¶≤‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ó‡¶£‡¶®‡¶æ (‡¶ê ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá‡¶∞)
    const enrolledInBatch = enrollments.filter(
      (e) => e.batchId === batchId && e.status === "active"
    ).length;

    // ‡¶§‡¶•‡ßç‡¶Ø ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ
    aggregatedData[type].totalEnrolled += enrolledInBatch;
    aggregatedData[type].totalBatches += 1;
    if (batch.courseFee < aggregatedData[type].minFee) {
      aggregatedData[type].minFee = batch.courseFee;
    }
    aggregatedData[type].batchIds.push(batchId);
  });

  // ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶ó‡¶£‡¶®‡¶æ (‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ID ‡¶ß‡¶∞‡ßá)
  const courseQuizCounts = quizzes.reduce((acc, quiz) => {
    acc[quiz.courseId] = (acc[quiz.courseId] || 0) + 1;
    return acc;
  }, {});

  // ‡¶ö‡ßÇ‡¶°‡¶º‡¶æ‡¶®‡ßç‡¶§ ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶ü
  return Object.values(aggregatedData).map((data) => ({
    ...data,
    quizCount: courseQuizCounts[data.courseId] || 0,
    cqCount: data.type === "ict" ? 15 : 10, // ‡¶°‡¶æ‡¶Æ‡¶ø CQ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ
  }));
};

// ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶ü‡¶æ‡¶á‡¶™ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶∏‡ßç‡¶ü‡¶æ‡¶á‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£
const getBatchTypeStyle = (type) => {
  if (type === "ict") {
    return {
      title: "ICT ‡¶è‡¶°‡¶Æ‡¶ø‡¶∂‡¶® ‡¶ì ‡¶è‡¶ï‡¶æ‡¶°‡ßá‡¶Æ‡¶ø‡¶ï",
      icon: "üíª",
      color: "from-blue-500 to-indigo-600",
      tColor: "text-indigo-600",
      bgColor: "from-blue-50 to-indigo-50",
      borderColor: "border-indigo-300",
      description:
        "‡¶â‡¶ö‡ßç‡¶ö ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡¶ø‡¶ï ‡¶ì ‡¶è‡¶°‡¶Æ‡¶ø‡¶∂‡¶® ‡¶Ü‡¶á‡¶∏‡¶ø‡¶ü‡¶ø ‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡¶∏‡¶Æ‡ßÇ‡¶π ‡¶ì ‡¶§‡¶•‡ßç‡¶Ø‡•§",
      popular: true,
    };
  } else if (type === "office") {
    return {
      title: "‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®",
      icon: "üóÑÔ∏è",
      color: "from-green-500 to-teal-600",
      tColor: "text-teal-600",
      bgColor: "from-green-50 to-teal-50",
      borderColor: "border-teal-300",
      description:
        "‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∏‡¶ø‡¶ï ‡¶ì ‡¶™‡ßá‡¶∂‡¶æ‡¶ó‡¶§ ‡¶Ö‡¶´‡¶ø‡¶∏ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡¶∏‡¶Æ‡ßÇ‡¶π‡•§",
      popular: false,
    };
  }
  //... ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶ü‡¶æ‡¶á‡¶™
  return {};
};

// ‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶§‡¶•‡ßç‡¶Ø (‡¶∏‡¶¨ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶á)
const commonInfo = {
  duration: "‡ß© ‡¶Æ‡¶æ‡¶∏",
  daysPerWeek: "‡ß¨ ‡¶¶‡¶ø‡¶® (‡¶∂‡¶®‡¶ø - ‡¶¨‡ßÉ‡¶π‡¶∏‡ßç‡¶™‡¶§‡¶ø‡¶¨‡¶æ‡¶∞)",
  features: [
    "‡¶Ö‡¶≠‡¶ø‡¶ú‡ßç‡¶û ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï",
    "‡¶õ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶∏‡¶æ‡¶á‡¶ú",
    "‡¶™‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏",
    "‡¶∏‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶ü ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶®",
  ],
};

const BatchScheduleSection = () => {
  // ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡¶æ
  const { batches, enrollments, quizzes } = useAppContext();
  const processedBatchGroups = aggregateBatchData(
    batches,
    enrollments,
    quizzes
  );

  return (
    <section className="py-16 bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50">
      <div className="container mx-auto px-4">
        {/* Section Header */}
        <div className="text-center mb-12">
          <div className="inline-flex items-center gap-2 bg-primary/10 px-4 py-2 rounded-full mb-4">
            <Sparkles className="w-5 h-5 text-primary" />
            <span className="text-primary font-semibold">
              ‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶ì ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶∏‡ßÇ‡¶ö‡ßÄ
            </span>
          </div>
          <h2 className="text-4xl md:text-5xl py-3 font-bold mb-4 bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">
            ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡ßá‡¶®‡ßá ‡¶®‡¶ø‡¶®
          </h2>
          <p className="text-lg text-gray-400 max-w-2xl mx-auto">
            ‡¶ö‡¶≤‡¶Æ‡¶æ‡¶® ‡¶∏‡¶ï‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡¶ø‡¶ö‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã‡•§ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶æ‡¶∞‡ßç‡¶°‡ßá
            ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®‡•§
          </p>
        </div>

        {/* Batch Type Cards Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
          {processedBatchGroups.map((group) => (
            <Link
              key={group.type}
              to={`/course-details/${group.type}`} // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ü‡¶æ‡¶á‡¶™ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶™‡ßá‡¶ú‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
              className={`card rounded-2xl shadow-xl bg-gradient-to-br ${group.bgColor} border-4 ${group.borderColor} hover:shadow-2xl hover:scale-[1.02] transition-all duration-300 overflow-hidden group/card relative block`}
            >
              {/* Popular Badge */}
              {group.popular && (
                <div className="absolute top-4 right-4 z-10">
                  <div className="flex items-center gap-1 bg-yellow-400 text-yellow-900 px-3 py-1 rounded-full text-xs font-bold shadow-lg">
                    ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º
                  </div>
                </div>
              )}

              <div className="card-body p-6">
                {/* Icon & Title */}
                <div className="flex items-center gap-4 mb-4">
                  <div className="text-5xl">{group.icon}</div>
                  <div className="flex-1">
                    <h3 className={`text-2xl font-bold mb-1 ${group.tColor}`}>
                      {group.title}
                    </h3>
                    <p className="text-sm text-gray-400">{group.description}</p>
                  </div>
                </div>

                {/* Quick Stats - Highlighted */}
                <div
                  className={`bg-gradient-to-r ${group.color} p-4 rounded-xl mb-4 transform group-hover/card:scale-[1.02] transition-transform text-white`}
                >
                  <div className="flex items-center justify-between gap-2">
                    <div className="flex items-center gap-2">
                      <DollarSign className="w-5 h-5" />
                      <span className="text-sm">‡¶ï‡ßã‡¶∞‡ßç‡¶∏ ‡¶´‡¶ø:</span>
                    </div>
                    <span className="text-xl font-bold">
                      {group.minFee} ‡¶ü‡¶æ‡¶ï‡¶æ
                    </span>
                  </div>
                </div>

                {/* Live Data Info */}
                <div className="space-y-3">
                  <InfoItem
                    icon={Users}
                    title="‡¶Æ‡ßã‡¶ü ‡¶è‡¶®‡¶∞‡ßã‡¶≤‡¶Æ‡ßá‡¶®‡ßç‡¶ü"
                    value={`${group.totalEnrolled} ‡¶ú‡¶®`}
                    color="text-red-500"
                  />
                  <InfoItem
                    icon={Calendar}
                    title="‡¶Æ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ö"
                    value={`${group.totalBatches} ‡¶ü‡¶ø`}
                    color="text-blue-500"
                  />
                  <InfoItem
                    icon={BookOpen}
                    title="‡¶Æ‡ßã‡¶ü MCQ ‡¶∏‡ßá‡¶ü"
                    value={`${group.quizCount} ‡¶ü‡¶ø`}
                    color="text-purple-500"
                  />
                </div>

                {/* CTA Button */}
                <button className="btn btn-primary w-full mt-6 gap-2 group-hover/card:gap-4 transition-all">
                  ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®
                  <ArrowRight className="w-5 h-5" />
                </button>
              </div>
            </Link>
          ))}
        </div>

        {/* Additional Info Section (Common Info) */}
        <div className="card bg-gradient-to-br from-purple-600 to-pink-600 text-white shadow-2xl rounded-2xl">
          <div className="card-body p-8">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
              {/* Left Side - Features */}
              <div>
                <div className="flex items-center gap-3 mb-6">
                  <GraduationCap className="w-12 h-12" />
                  <h3 className="text-3xl font-bold">‡¶ï‡ßã‡¶∞‡ßç‡¶∏‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶§‡ßç‡¶¨</h3>
                </div>
                <div className="grid grid-cols-2 gap-4">
                  {commonInfo.features.map((feature, index) => (
                    <div
                      key={index}
                      className="flex items-center gap-2 bg-white/20 backdrop-blur-sm p-3 rounded-lg"
                    >
                      <div className="w-2 h-2 bg-white rounded-full"></div>
                      <span className="font-semibold">{feature}</span>
                    </div>
                  ))}
                </div>
              </div>

              {/* Right Side - Class Days */}
              <div>
                <div className="card bg-white/20 backdrop-blur-sm border-2 border-white/30 rounded-xl">
                  <div className="card-body p-6">
                    <h4 className="text-xl font-bold mb-4">
                      ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤ ‡¶ì ‡¶¶‡¶ø‡¶®
                    </h4>
                    <div className="flex items-center gap-2 mb-4">
                      <Calendar className="w-6 h-6" />
                      <span className="text-lg font-semibold">
                        {commonInfo.duration} ‡¶Æ‡ßá‡¶Ø‡¶º‡¶æ‡¶¶‡ßÄ ‡¶ï‡ßã‡¶∞‡ßç‡¶∏
                      </span>
                    </div>
                    <p className="font-semibold mb-3">‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶∏‡¶™‡ßç‡¶§‡¶æ‡¶π‡ßá:</p>
                    <div className="grid grid-cols-3 gap-2">
                      {["‡¶∂‡¶®‡¶ø", "‡¶∞‡¶¨‡¶ø", "‡¶∏‡ßã‡¶Æ", "‡¶Æ‡¶ô‡ßç‡¶ó‡¶≤", "‡¶¨‡ßÅ‡¶ß", "‡¶¨‡ßÉ‡¶π‡¶É"].map(
                        (day) => (
                          <div
                            key={day}
                            className="bg-white/30 backdrop-blur-sm py-2 px-3 rounded-lg text-center font-bold"
                          >
                            {day}
                          </div>
                        )
                      )}
                    </div>
                    <div className="mt-4 p-3 bg-white/30 backdrop-blur-sm rounded-lg text-center">
                      <span className="text-sm font-semibold">
                        ‡¶∂‡ßÅ‡¶ï‡ßç‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶ø‡¶ï ‡¶õ‡ßÅ‡¶ü‡¶ø
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

// ‡¶õ‡ßã‡¶ü ‡¶π‡ßá‡¶≤‡ßç‡¶™‡¶æ‡¶∞ ‡¶ï‡¶Æ‡ßç‡¶™‡ßã‡¶®‡ßá‡¶®‡ßç‡¶ü
const InfoItem = ({ icon: Icon, title, value, color }) => (
  <div className="flex items-center gap-3 text-sm p-2 rounded-lg bg-white/50 border border-gray-100">
    <div className="p-1 rounded-lg">
      <Icon className={`w-5 h-5 ${color}`} />
    </div>
    <div className="flex justify-between flex-1">
      <p className="text-xs text-gray-400">{title}</p>
      <p className="font-bold text-gray-800">{value}</p>
    </div>
  </div>
);

export default BatchScheduleSection;
