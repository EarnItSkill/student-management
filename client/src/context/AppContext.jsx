import axios from "axios";
import { createContext, useEffect, useState } from "react";

// Import local JSON data
// import attendanceData from "../data/attendance.json";

export const AppContext = createContext();

export const AppProvider = ({ children }) => {
  // Authentication State
  const [currentUser, setCurrentUser] = useState(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  // Data States
  const [students, setStudents] = useState([]);
  const [courses, setCourses] = useState([]);
  const [batches, setBatches] = useState([]);
  const [enrollments, setEnrollments] = useState([]);
  const [payments, setPayments] = useState([]);
  const [attendance, setAttendance] = useState([]);
  const [quizzes, setQuizzes] = useState([]);

  // Loading State
  const [loading, setLoading] = useState(true);

  // For Dashboard
  const [isSideMenu, setIsSideMenu] = useState(true);

  // Load data from local JSON on mount

  useEffect(() => {
    const getData = async () => {
      try {
        const students = await axios.get(
          `${import.meta.env.VITE_API_URL}/students`
        );
        setStudents(students?.data);

        const courses = await axios.get(
          `${import.meta.env.VITE_API_URL}/courses`
        );
        setCourses(courses.data);

        const batches = await axios.get(
          `${import.meta.env.VITE_API_URL}/batches`
        );
        setBatches(batches.data);

        const enrollments = await axios.get(
          `${import.meta.env.VITE_API_URL}/enrollments`
        );
        setEnrollments(enrollments.data);

        const payments = await axios.get(
          `${import.meta.env.VITE_API_URL}/payments`
        );
        setPayments(payments.data);

        const attendance = await axios.get(
          `${import.meta.env.VITE_API_URL}/attendance`
        );
        setAttendance(attendance.data);

        const quizzes = await axios.get(
          `${import.meta.env.VITE_API_URL}/quizzes`
        );
        setQuizzes(quizzes.data);

        // Check if user is logged in (from localStorage)
        const savedUser = localStorage.getItem("currentUser");
        if (savedUser) {
          const user = JSON.parse(savedUser);
          setCurrentUser(user);
          setIsAuthenticated(true);
        }

        setLoading(false);
      } catch (error) {
        console.log(error);
      }
      setLoading(false);
    };
    getData();
  }, []);

  useEffect(() => {
    const loadData = () => {
      try {
        // setAttendance(attendanceData);

        // // Check if user is logged in (from localStorage)
        // const savedUser = localStorage.getItem("currentUser");
        // if (savedUser) {
        //   const user = JSON.parse(savedUser);
        //   setCurrentUser(user);
        //   setIsAuthenticated(true);
        // }

        setLoading(false);
      } catch (error) {
        console.error("Error loading data:", error);
        setLoading(false);
      }
    };

    // TODO: Replace with API later
    loadData();
  }, []);

  // ============== Authentication Functions ==============

  const login = (email, password) => {
    // Check admin login
    if (email === "mrmozammal@gmail.com" && password === "admin123") {
      const adminUser = {
        id: 0,
        name: "Admin",
        email: "mrmozammal@gmail.com",
        role: "admin",
        image: "https://i.pravatar.cc/150?img=33",
      };
      setCurrentUser(adminUser);
      setIsAuthenticated(true);
      localStorage.setItem("currentUser", JSON.stringify(adminUser));
      return { success: true, user: adminUser };
    }

    // Check student login
    const student = students.find(
      (s) => s.email === email && s.password === password
    );

    if (student) {
      const user = { ...student };
      delete user.password; // Remove password from user object
      setCurrentUser(user);
      setIsAuthenticated(true);
      localStorage.setItem("currentUser", JSON.stringify(user));
      return { success: true, user };
    }

    return { success: false, message: "Invalid email or password" };
  };

  const logout = () => {
    setCurrentUser(null);
    setIsAuthenticated(false);
    localStorage.removeItem("currentUser");
  };

  // ============== Student CRUD Functions ==============

  const addStudent = async (newStudent) => {
    try {
      // optional: generate image if not provided
      const studentData = {
        ...newStudent,
        role: "student",
        image:
          newStudent.image ||
          `https://i.pravatar.cc/150?img=${Math.floor(Math.random() * 70)}`,
      };

      // ЁЯФ╣ Step 1: send to backend
      const response = await axios.post(
        `${import.meta.env.VITE_API_URL}/student`,
        studentData
      );

      // ЁЯФ╣ Step 2: get the created student from API response
      const createdStudent = response.data;

      // ЁЯФ╣ Step 3: update local state
      setStudents((prev) => [...prev, createdStudent]);

      return createdStudent;
    } catch (error) {
      console.error("Failed to add student:", error);
      throw error;
    }
  };

  const updateStudent = async (id, updatedData) => {
    try {
      // ЁЯФ╣ Step 1: API рждрзЗ ржбрж╛ржЯрж╛ ржкрж╛ржарж╛ржУ (PUT ржмрж╛ PATCH)
      const response = await axios.put(
        `${import.meta.env.VITE_API_URL}/student/${id}`,
        updatedData
      );

      // ЁЯФ╣ Step 2: API ржерзЗржХрзЗ ржЖржкржбрзЗржЯрзЗржб student ржЕржмржЬрзЗржХрзНржЯ ржирж╛ржУ
      const updatedStudent = response.data;
      console.log(updatedStudent);
      // ЁЯФ╣ Step 3: рж▓рзЛржХрж╛рж▓ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ ржХрж░рзЛ
      setStudents((prev) =>
        prev.map((s) => (s._id === id ? updatedStudent : s))
      );
      console.log(students);

      console.log(`Student with id ${id} updated successfully`);
      return updatedStudent;
    } catch (error) {
      console.error("Failed to update student:", error);
      throw error;
    }
  };

  const deleteStudent = async (id) => {
    try {
      // ЁЯФ╣ Step 1: Delete from backend
      await axios.delete(`${import.meta.env.VITE_API_URL}/student/${id}`);

      // ЁЯФ╣ Step 2: Update local state after successful deletion
      setStudents((prev) => prev.filter((s) => s._id !== id));

      console.log(`Student with id ${id} deleted successfully`);
    } catch (error) {
      console.error("Failed to delete student:", error);
      throw error;
    }
  };

  // ============== Course CRUD Functions ==============

  const addCourse = async (newCourse) => {
    try {
      // API-рждрзЗ ржирждрзБржи ржХрзЛрж░рзНрж╕ ржбрзЗржЯрж╛ POST ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const response = await axios.post(
        `${import.meta.env.VITE_API_URL}/courses`,
        newCourse // ржПржЦрж╛ржирзЗ newCourse ржЕржмржЬрзЗржХрзНржЯржЯрж┐ API-рждрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      );
      console.log(response);

      // рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ рж░рзЗрж╕ржкржирзНрж╕ рж╣рж┐рж╕рзЗржмрзЗ ржЖрж╕рж╛ ржирждрзБржи ржХрзЛрж░рзНрж╕ржЯрж┐ ржжрж┐рзЯрзЗ state ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      // рж╕рж╛ржзрж╛рж░ржгржд, рж╕рж╛рж░рзНржнрж╛рж░ ржирждрзБржи ржХрзЛрж░рзНрж╕ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рждрж╛рж░ ржбрж╛ржЯрж╛ржмрзЗрж╕-ржЬрзЗржирж╛рж░рзЗржЯрзЗржб id рж╕рж╣ ржлрзЗрж░ржд ржкрж╛ржарж╛рзЯ
      setCourses([...courses, response.data]);

      // ржирждрзБржи ржХрзЛрж░рзНрж╕ржЯрж┐ ржлрзЗрж░ржд ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ, ржпрж╛рждрзЗ UI рждрзЗ рждрж╛рзОржХрзНрж╖ржгрж┐ржХржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ
      return response.data;
    } catch (error) {
      console.error("Error adding course:", error);
      // ржПржЦрж╛ржирзЗ ржЖржкржирж┐ ржЗржЙржЬрж╛рж░ржХрзЗ ржПрж░рж░ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржжрзЗржЦрж╛рждрзЗ ржкрж╛рж░рзЗржи
      throw error; // ржПрж░рж░ржЯрж┐ ржХрж▓рж┐ржВ ржлрж╛ржВрж╢ржирзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
    }
  };

  const updateCourse = async (id, updatedData) => {
    try {
      // рж╕рж╛рж░рзНржнрж╛рж░рзЗ ржХрзЛрж░рзНрж╕ ржбрзЗржЯрж╛ ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп PUT рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      // ржЖржкржирж┐ ржЪрж╛ржЗрж▓рзЗ axios.patch() ржУ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи
      const response = await axios.put(
        `${import.meta.env.VITE_API_URL}/course/${id}`,
        updatedData
      );
      console.log(response);

      // рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ рж░рзЗрж╕ржкржирзНрж╕ рж╣рж┐рж╕рзЗржмрзЗ ржЖрж╕рж╛ рж╕ржорзНржкрзВрж░рзНржг ржЖржкржбрзЗржЯрзЗржб ржХрзЛрж░рзНрж╕ ржЕржмржЬрзЗржХрзНржЯ
      const updatedCourseFromServer = response.data;

      // state-ржПрж░ ржоржзрзНржпрзЗ ржерж╛ржХрж╛ ржкрзБрж░ржирзЛ ржХрзЛрж░рзНрж╕ржЯрж┐ржХрзЗ рж╕рж╛рж░рзНржнрж╛рж░ ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ ржирждрзБржи ржХрзЛрж░рзНрж╕ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      setCourses(
        courses.map((course) =>
          course.id === id ? updatedCourseFromServer : course
        )
      );

      // ржЖржкржбрзЗржЯрзЗржб ржХрзЛрж░рзНрж╕ржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      return updatedCourseFromServer;
    } catch (error) {
      console.error("Error updating course:", error);
      // ржПржЦрж╛ржирзЗ ржЗржЙржЬрж╛рж░ржХрзЗ ржПрж░рж░ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржжрзЗржЦрж╛рждрзЗ ржкрж╛рж░рзЗржи
      throw error;
    }
  };

  const deleteCourse = async (id) => {
    try {
      // рж╕рж╛рж░рзНржнрж╛рж░рзЗ ржХрзЛрж░рзНрж╕ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛рж░ ржЬржирзНржп DELETE рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      await axios.delete(`${import.meta.env.VITE_API_URL}/courses/${id}`);

      // рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ рж╕ржлрж▓ рж╣рж▓рзЗ, state ржерзЗржХрзЗ ржУржЗ ржХрзЛрж░рзНрж╕ржЯрж┐ ржмрж╛ржж ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      setCourses(courses.filter((c) => c._id !== id));
    } catch (error) {
      console.error("Error deleting course:", error);
      // ржПржЦрж╛ржирзЗ ржЖржкржирж┐ ржЗржЙржЬрж╛рж░ржХрзЗ ржПрж░рж░ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржжрзЗржЦрж╛рждрзЗ ржкрж╛рж░рзЗржи
      throw error;
    }
  };

  // ============== Batch CRUD Functions ==============

  // const addBatch = (newBatch) => {
  //   // TODO: Replace with API later
  //   const batchWithId = {
  //     ...newBatch,
  //     id: batches.length > 0 ? Math.max(...batches.map((b) => b.id)) + 1 : 1,
  //     enrolledStudents: 0,
  //   };
  //   setBatches([...batches, batchWithId]);
  //   return batchWithId;
  // };

  // const addBatch = async (newBatch) => {
  //   try {
  //     // ржлрж╛ржВрж╢ржиржЯрж┐ржХрзЗ async ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ ржХрж╛рж░ржг ржПрж░ ржоржзрзНржпрзЗ await ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред

  //     // 1. API ржХрж▓ ржХрж░рзЗ ржирждрзБржи ржмрзНржпрж╛ржЪ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
  //     const response = await axios.post(
  //       `${import.meta.env.VITE_API_URL}/batches`,
  //       newBatch
  //     );

  //     // 2. API ржерзЗржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржУрзЯрж╛ ржмрзНржпрж╛ржЪ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ (ржпрж╛рж░ ржоржзрзНржпрзЗ ржирждрзБржи ID ржЖржЫрзЗ) ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
  //     const batchWithId = response.data;

  //     // 3. рж╕рзНржерж╛ржирзАржпрж╝ рж╕рзНржЯрзЗржЯ (local state) ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
  //     // рж╕рж╛ржзрж╛рж░ржгржд, setBatches-ржХрзЗ ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (functional update) рж╣рж┐рж╕рзЗржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржирж┐рж░рж╛ржкржж:
  //     setBatches((prevBatches) => [...prevBatches, batchWithId]);

  //     // 4. ржирждрзБржи рждрзИрж░рж┐ рж╣ржУрзЯрж╛ ржмрзНржпрж╛ржЪ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
  //     return batchWithId;
  //   } catch (error) {
  //     // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
  //     console.error("API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржирждрзБржи ржмрзНржпрж╛ржЪ ржпрзЛржЧ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:", error);
  //     // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛рж░ ржЬржирзНржп throw ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
  //     throw error;
  //   }
  // };

  const addBatch = async (newBatch) => {
    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирждрзБржи ржмрзНржпрж╛ржЪ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const response = await axios.post(
        `${import.meta.env.VITE_API_URL}/batches`,
        newBatch // ржирждрзБржи ржмрзНржпрж╛ржЪрзЗрж░ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржмрзНржпрж╛ржХржПржирзНржбрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      );
      console.log(newBatch);
      // 2. API ржерзЗржХрзЗ рждрзИрж░рж┐ рж╣ржУрзЯрж╛ ржирждрзБржи ржмрзНржпрж╛ржЪ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const batchWithId = response.data;

      // 3. тЬи ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (Functional Update) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ:
      //    'prevBatches' ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐ржпрзБржХрзНрждржнрж╛ржмрзЗ рж╕рзНржЯрзЗржЯрзЗрж░ рж╕рж░рзНржмрж╢рзЗрж╖ ржнрзНржпрж╛рж▓рзБ ржзрж╛рж░ржг ржХрж░рзЗред
      setBatches((prevBatches) => {
        // ржкрзВрж░рзНржмрзЗрж░ ржЕрзНржпрж╛рж░рзЗрж░ рж╕ржм ржЙржкрж╛ржжрж╛ржи ржПржмржВ ржирждрзБржи ржмрзНржпрж╛ржЪржЯрж┐ ржпрзЛржЧ ржХрж░рзЗ ржПржХржЯрж┐ ржирждрзБржи ржЕрзНржпрж╛рж░рзЗ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
        return [...prevBatches, batchWithId];
      });

      // 4. ржирждрзБржи рждрзИрж░рж┐ рж╣ржУрзЯрж╛ ржмрзНржпрж╛ржЪ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      return batchWithId;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error("API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржирждрзБржи ржмрзНржпрж╛ржЪ ржпрзЛржЧ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:", error);
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  // const updateBatch = (id, updatedData) => {
  //   // TODO: Replace with API later
  //   setBatches(
  //     batches.map((b) => (b._id === id ? { ...b, ...updatedData } : b))
  //   );
  // };

  const updateBatch = async (batchId, updatedBatchData) => {
    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ID-ржПрж░ ржмрзНржпрж╛ржЪржЯрж┐ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const response = await axios.put(
        `${import.meta.env.VITE_API_URL}/batch/${batchId}`,
        updatedBatchData
      );

      // 2. API ржерзЗржХрзЗ рж╕рж╛рж░рзНржнрж╛рж░рзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛ ржбрзЗржЯрж╛ ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const updatedBatch = response.data;

      // 3. тЬи ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (Functional Update) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ:
      //    ржкрзБрж░рзЛржирзЛ ржмрзНржпрж╛ржЪржЯрж┐ржХрзЗ ржирждрзБржи ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛ ржмрзНржпрж╛ржЪ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи (replace) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
      setBatches((prevBatches) => {
        return prevBatches.map((batch) =>
          // ржпржжрж┐ ржмрзНржпрж╛ржЪрзЗрж░ ID ржорзНржпрж╛ржЪ ржХрж░рзЗ, рждрж╛рж╣рж▓рзЗ ржирждрзБржи ржбрзЗржЯрж╛ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рж╛ рж╣ржмрзЗ
          batch._id === batchId ? updatedBatch : batch
        );
      });

      // 4. ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛ ржмрзНржпрж╛ржЪ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      return updatedBatch;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error(
        `API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржмрзНржпрж╛ржЪ ID: ${batchId} ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:`,
        error
      );
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  // const deleteBatch = (id) => {
  //   // TODO: Replace with API later
  //   setBatches(batches.filter((b) => b.id !== id));
  // };

  const deleteBatch = async (batchId) => {
    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ID-ржПрж░ ржмрзНржпрж╛ржЪржЯрж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      await axios.delete(`${import.meta.env.VITE_API_URL}/batches/${batchId}`);

      // API рж╕ржлрж▓ржнрж╛ржмрзЗ рж░рзЗрж╕ржкржирзНрж╕ ржжрж┐рж▓рзЗ (рж╕рж╛ржзрж╛рж░ржгржд 200 ржмрж╛ 204 рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржХрзЛржб)

      // 2. тЬи ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (Functional Update) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ:
      //    ржпрзЗ ржмрзНржпрж╛ржЪржЯрж┐рж░ ID ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ, рж╕рзЗржЯрж┐ржХрзЗ ржмрж╛ржж ржжрж┐ржпрж╝рзЗ ржмрж╛ржХрж┐ ржмрзНржпрж╛ржЪржЧрзБрж▓рзЛ ржжрж┐ржпрж╝рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
      setBatches((prevBatches) => {
        // filter() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржбрж┐рж▓рж┐ржЯ рж╣ржУрзЯрж╛ ржмрзНржпрж╛ржЪржЯрж┐ржХрзЗ ржмрж╛ржж ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
        return prevBatches.filter((batch) => batch._id !== batchId);
      });

      // 3. ржбрж┐рж▓рж┐ржЯ рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ ржмрзЛржЭрж╛ржирзЛрж░ ржЬржирзНржп ржХрж┐ржЫрзБ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ (ржпрзЗржоржи: true)
      return true;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error(
        `API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржмрзНржпрж╛ржЪ ID: ${batchId} ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:`,
        error
      );
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  // ============== Enrollment Functions ==============

  // const enrollStudent = (studentId, batchId) => {
  //   // TODO: Replace with API later
  //   const newEnrollment = {
  //     id:
  //       enrollments.length > 0
  //         ? Math.max(...enrollments.map((e) => e.id)) + 1
  //         : 1,
  //     studentId,
  //     batchId,
  //     enrollDate: new Date().toISOString().split("T")[0],
  //     status: "active",
  //   };
  //   setEnrollments([...enrollments, newEnrollment]);

  //   // Update batch enrolled count
  //   setBatches(
  //     batches.map((b) =>
  //       b.id === batchId
  //         ? { ...b, enrolledStudents: b.enrolledStudents + 1 }
  //         : b
  //     )
  //   );

  //   return newEnrollment;
  // };

  const enrollStudent = async (studentId, batchId) => {
    console.log(studentId, batchId);
    // API-рждрзЗ ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржп ржбрзЗржЯрж╛ ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    const enrollmentData = {
      studentId,
      batchId,
      enrollDate: new Date().toISOString().split("T")[0], // рждрж╛рж░рж┐ржЦ ржмрзНржпрж╛ржХржПржирзНржбрзЗржУ рж╕рзЗржЯ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
      status: "active", // рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржмрзНржпрж╛ржХржПржирзНржбрзЗржУ рж╕рзЗржЯ ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ
    };

    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирждрзБржи ржПржирж░рзЛрж▓ржорзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const response = await axios.post(
        `${import.meta.env.VITE_API_URL}/enrollments`,
        enrollmentData // ржПржирж░рзЛрж▓ржорзЗржирзНржЯ ржбрзЗржЯрж╛ API-рждрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      );

      // 2. API ржерзЗржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржУрзЯрж╛ ржПржирж░рзЛрж▓ржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ (ржпрж╛рж░ ржоржзрзНржпрзЗ ржирждрзБржи ID ржЖржЫрзЗ) ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const newEnrollment = response.data;

      // --- рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ рж╢рзБрж░рзБ ---

      // 3. тЬи ржПржирж░рзЛрж▓ржорзЗржирзНржЯ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ (Functional Update)
      // ржирждрзБржи ржПржирж░рзЛрж▓ржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ 'enrollments' ржЕрзНржпрж╛рж░рзЗрждрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
      setEnrollments((prevEnrollments) => [...prevEnrollments, newEnrollment]);

      // 4. тЬи ржмрзНржпрж╛ржЪ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ (Functional Update)
      // рж╕ржВрж╢рзНрж▓рж┐рж╖рзНржЯ ржмрзНржпрж╛ржЪрзЗрж░ 'enrolledStudents' ржХрж╛ржЙржирзНржЯ 1 ржмрж╛ржбрж╝рж╛ржирзЛ рж╣ржЪрзНржЫрзЗред
      setBatches((prevBatches) =>
        prevBatches.map((b) =>
          b._id === batchId
            ? { ...b, enrolledStudents: b.enrolledStudents + 1 }
            : b
        )
      );

      // --- рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ рж╢рзЗрж╖ ---

      // 5. ржирждрзБржи ржПржирж░рзЛрж▓ржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      return newEnrollment;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error("API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржЫрж╛рждрзНрж░ ржиржерж┐ржнрзБржХрзНржд ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:", error);
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  // const unenrollStudent = (enrollmentId) => {
  //   // TODO: Replace with API later
  //   const enrollment = enrollments.find((e) => e.id === enrollmentId);
  //   if (enrollment) {
  //     setBatches(
  //       batches.map((b) =>
  //         b.id === enrollment.batchId
  //           ? { ...b, enrolledStudents: b.enrolledStudents - 1 }
  //           : b
  //       )
  //     );
  //   }
  //   setEnrollments(enrollments.filter((e) => e.id !== enrollmentId));
  // };

  const unenrollStudent = async (enrollmentId) => {
    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ID-ржПрж░ ржПржирж░рзЛрж▓ржорзЗржирзНржЯ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      // ржЖржорж░рж╛ ржзрж░рзЗ ржирж┐ржЪрзНржЫрж┐ ржпрзЗ API ржбрж┐рж▓рж┐ржЯ рж╣ржУржпрж╝рж╛ ржПржирж░рзЛрж▓ржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рзЗрж╕ржкржирзНрж╕ рж╣рж┐рж╕рзЗржмрзЗ ржжрзЗржмрзЗред
      const response = await axios.delete(
        `${import.meta.env.VITE_API_URL}/enrollments/${enrollmentId}`
      );

      // 2. API ржерзЗржХрзЗ ржбрж┐рж▓рж┐ржЯ рж╣ржУржпрж╝рж╛ ржПржирж░рзЛрж▓ржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ (ржпрзЗржЦрж╛ржирзЗ batchId ржЖржЫрзЗ)
      const deletedEnrollment = response.data; // ржЕржержмрж╛ response.data.enrollment
      const batchId = deletedEnrollment.batchId;

      // --- рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ рж╢рзБрж░рзБ ---

      // 3. тЬи ржПржирж░рзЛрж▓ржорзЗржирзНржЯ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ (Functional Update)
      // ржбрж┐рж▓рж┐ржЯ рж╣ржУрзЯрж╛ ржПржирж░рзЛрж▓ржорзЗржирзНржЯржЯрж┐ржХрзЗ 'enrollments' ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ ржмрж╛ржж ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗред
      setEnrollments((prevEnrollments) =>
        prevEnrollments.filter((e) => e._id !== enrollmentId)
      );

      // 4. тЬи ржмрзНржпрж╛ржЪ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ (Functional Update)
      // рж╕ржВрж╢рзНрж▓рж┐рж╖рзНржЯ ржмрзНржпрж╛ржЪрзЗрж░ 'enrolledStudents' ржХрж╛ржЙржирзНржЯ 1 ржХржорж╛ржирзЛ рж╣ржЪрзНржЫрзЗред
      setBatches((prevBatches) =>
        prevBatches.map((b) =>
          b._id === batchId
            ? { ...b, enrolledStudents: b.enrolledStudents - 1 }
            : b
        )
      );

      // --- рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ рж╢рзЗрж╖ ---

      // 5. ржбрж┐рж▓рж┐ржЯ рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ ржмрзЛржЭрж╛ржирзЛрж░ ржЬржирзНржп ржХрж┐ржЫрзБ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ (ржпрзЗржоржи: true)
      return true;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error(
        `API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржПржирж░рзЛрж▓ржорзЗржирзНржЯ ID: ${enrollmentId} ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:`,
        error
      );
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  // ============== Payment Functions ==============

  // const addPayment = (newPayment) => {
  //   // TODO: Replace with API later
  //   const paymentWithId = {
  //     ...newPayment,
  //     id: payments.length > 0 ? Math.max(...payments.map((p) => p.id)) + 1 : 1,
  //     paymentDate: new Date().toISOString().split("T")[0],
  //   };
  //   setPayments([...payments, paymentWithId]);
  //   return paymentWithId;
  // };

  const addPayment = async (newPayment) => {
    // ржкрзЗржорзЗржирзНржЯрзЗрж░ ржбрзЗржЯрж╛ API-рждрзЗ ржкрж╛ржарж╛ржирзЛрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
    // newPayment ржЕржмржЬрзЗржХрзНржЯрзЗ studentId, amount, method, enrollmentId ржЗрждрзНржпрж╛ржжрж┐ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред

    // ржоржирзЗ рж░рж╛ржЦржмрзЗржи: paymentDate ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛ ржмрж╛ ID ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛рж░ ржХрж╛ржЬ ржПржЦржи ржмрзНржпрж╛ржХржПржирзНржб ржХрж░ржмрзЗред

    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирждрзБржи ржкрзЗржорзЗржирзНржЯ рж░рзЗржХрж░рзНржб рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const response = await axios.post(
        `${import.meta.env.VITE_API_URL}/payments`,
        newPayment // ржкрзЗржорзЗржирзНржЯрзЗрж░ ржбрзЗржЯрж╛ API-рждрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      );

      // 2. API ржерзЗржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржУрзЯрж╛ ржкрзЗржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ (ржпрж╛рж░ ржоржзрзНржпрзЗ _id, paymentDate ржЗрждрзНржпрж╛ржжрж┐ ржЖржЫрзЗ) ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const paymentWithId = response.data;

      // 3. тЬи ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (Functional Update) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ:
      // ржирждрзБржи ржкрзЗржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ 'payments' ржЕрзНржпрж╛рж░рзЗрждрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
      setPayments((prevPayments) => [...prevPayments, paymentWithId]);

      // 4. ржирждрзБржи ржкрзЗржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      return paymentWithId;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error("API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржирждрзБржи ржкрзЗржорзЗржирзНржЯ ржпрзЛржЧ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:", error);
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  // const updatePayment = (id, updatedData) => {
  //   // TODO: Replace with API later
  //   setPayments(
  //     payments.map((p) => (p._id === id ? { ...p, ...updatedData } : p))
  //   );
  // };

  const updatePayment = async (id, updatedData) => {
    // ржПржЦрж╛ржирзЗ id рж╣рж▓рзЛ ржкрзЗржорзЗржирзНржЯ рж░рзЗржХрж░рзНржбрзЗрж░ _id

    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ID-ржПрж░ ржкрзЗржорзЗржирзНржЯ рж░рзЗржХрж░рзНржбржЯрж┐ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const response = await axios.put(
        // ржЖржВрж╢рж┐ржХ ржЖржкржбрзЗржЯрзЗрж░ ржЬржирзНржп PATCH ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛ
        `${import.meta.env.VITE_API_URL}/payments/${id}`, // URL-ржП ржкрзЗржорзЗржирзНржЯ ID ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        updatedData // ржпрзЗ ржбрзЗржЯрж╛ржЧрзБрж▓рзЛ ржЖржкржбрзЗржЯ ржХрж░рждрзЗ рж╣ржмрзЗ, рж╢рзБржзрзБ рж╕рзЗржЧрзБрж▓рзЛ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      );

      // 2. API ржерзЗржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛ ржкрзЗржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const updatedPayment = response.data;

      // 3. тЬи ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (Functional Update) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ:
      //    ржкрзБрж░рзЛржирзЛ ржкрзЗржорзЗржирзНржЯржЯрж┐ржХрзЗ ржирждрзБржи ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛ ржкрзЗржорзЗржирзНржЯ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи (replace) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
      setPayments((prevPayments) =>
        prevPayments.map((p) =>
          // ржпржжрж┐ ржкрзЗржорзЗржирзНржЯрзЗрж░ ID ржорзНржпрж╛ржЪ ржХрж░рзЗ, рждржмрзЗ ржирждрзБржи ржбрзЗржЯрж╛ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рж╛ рж╣ржмрзЗ
          p._id === id ? updatedPayment : p
        )
      );

      // 4. ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛ ржкрзЗржорзЗржирзНржЯ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      return updatedPayment;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error(
        `API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржкрзЗржорзЗржирзНржЯ ID: ${id} ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:`,
        error
      );
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  // ============== Attendance Functions ==============

  // const addAttendance = (newAttendance) => {
  //   // TODO: Replace with API later
  //   const attendanceWithId = {
  //     ...newAttendance,
  //     id:
  //       attendance.length > 0
  //         ? Math.max(...attendance.map((a) => a.id)) + 1
  //         : 1,
  //     date: new Date().toISOString().split("T")[0],
  //   };
  //   setAttendance([...attendance, attendanceWithId]);
  //   return attendanceWithId;
  // };

  const addAttendance = async (newAttendance) => {
    // newAttendance ржЕржмржЬрзЗржХрзНржЯрзЗ studentId, batchId, status, ржЗрждрзНржпрж╛ржжрж┐ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред

    // ржоржирзЗ рж░рж╛ржЦржмрзЗржи: 'date' ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛ ржмрж╛ 'id' ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛рж░ ржХрж╛ржЬ ржПржЦржи ржмрзНржпрж╛ржХржПржирзНржб ржХрж░ржмрзЗред

    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирждрзБржи ржЕрзНржпрж╛ржЯрзЗржирзНржбрзЗржирзНрж╕ рж░рзЗржХрж░рзНржб рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const response = await axios.post(
        `${import.meta.env.VITE_API_URL}/attendances`,
        newAttendance // ржЕрзНржпрж╛ржЯрзЗржирзНржбрзЗржирзНрж╕ ржбрзЗржЯрж╛ API-рждрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      );

      // 2. API ржерзЗржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржУрзЯрж╛ ржЕрзНржпрж╛ржЯрзЗржирзНржбрзЗржирзНрж╕ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ (ржпрж╛рж░ ржоржзрзНржпрзЗ _id, date ржЗрждрзНржпрж╛ржжрж┐ ржЖржЫрзЗ) ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const attendanceWithId = response.data;

      // 3. тЬи ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (Functional Update) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ:
      // ржирждрзБржи ржЕрзНржпрж╛ржЯрзЗржирзНржбрзЗржирзНрж╕ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ 'attendance' ржЕрзНржпрж╛рж░рзЗрждрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
      setAttendance((prevAttendance) => [...prevAttendance, attendanceWithId]);

      // 4. ржирждрзБржи ржЕрзНржпрж╛ржЯрзЗржирзНржбрзЗржирзНрж╕ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      return attendanceWithId;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error(
        "API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржЕрзНржпрж╛ржЯрзЗржирзНржбрзЗржирзНрж╕ ржпрзЛржЧ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:",
        error
      );
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  const updateAttendance = (id, updatedData) => {
    // TODO: Replace with API later
    setAttendance(
      attendance.map((a) => (a.id === id ? { ...a, ...updatedData } : a))
    );
  };

  // ============== Quiz Functions ==============

  // const addQuiz = (newQuiz) => {
  //   // TODO: Replace with API later
  //   const quizWithId = {
  //     ...newQuiz,
  //     id: quizzes.length > 0 ? Math.max(...quizzes.map((q) => q.id)) + 1 : 1,
  //     results: [],
  //   };
  //   setQuizzes([...quizzes, quizWithId]);
  //   return quizWithId;
  // };

  const addQuiz = async (newQuiz) => {
    // newQuiz ржЕржмржЬрзЗржХрзНржЯрзЗ quizName, courseId, questions, ржЗрждрзНржпрж╛ржжрж┐ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗред

    // ржоржирзЗ рж░рж╛ржЦржмрзЗржи: 'id' ржЬрзЗржирж╛рж░рзЗржЯ ржХрж░рж╛ ржПржмржВ 'results' ржЕрзНржпрж╛рж░рзЗ ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬ ржХрж░рж╛рж░ ржХрж╛ржЬ ржПржЦржи ржмрзНржпрж╛ржХржПржирзНржб ржХрж░ржмрзЗред

    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирждрзБржи ржХрзБржЗржЬ рж░рзЗржХрж░рзНржб рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const response = await axios.post(
        `${import.meta.env.VITE_API_URL}/quizzes`,
        newQuiz // ржХрзБржЗржЬрзЗрж░ ржбрзЗржЯрж╛ API-рждрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      );

      // 2. API ржерзЗржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржУрзЯрж╛ ржХрзБржЗржЬ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ (ржпрж╛рж░ ржоржзрзНржпрзЗ _id, results: [] ржЗрждрзНржпрж╛ржжрж┐ ржЖржЫрзЗ) ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const quizWithId = response.data;

      // 3. тЬи ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (Functional Update) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ:
      // ржирждрзБржи ржХрзБржЗржЬ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ 'quizzes' ржЕрзНржпрж╛рж░рзЗрждрзЗ ржпрзЛржЧ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
      setQuizzes((prevQuizzes) => [...prevQuizzes, quizWithId]);

      // 4. ржирждрзБржи ржХрзБржЗржЬ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      return quizWithId;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error("API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржирждрзБржи ржХрзБржЗржЬ ржпрзЛржЧ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:", error);
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  // const updateQuiz = (id, updatedData) => {
  //   // TODO: Replace with API later
  //   setQuizzes(
  //     quizzes.map((q) => {
  //       if (q.id === id) {
  //         // Keep existing results when updating
  //         return {
  //           ...q,
  //           ...updatedData,
  //           results: q.results, // Don't overwrite results
  //         };
  //       }
  //       return q;
  //     })
  //   );
  // };

  const updateQuiz = async (id, updatedData) => {
    // ржПржЦрж╛ржирзЗ id рж╣рж▓рзЛ ржХрзБржЗржЬ рж░рзЗржХрж░рзНржбрзЗрж░ _id

    // updatedData ржерзЗржХрзЗ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рждрзЗ рж╣ржмрзЗ ржпрзЗржи ржХрзЛржирзЛржнрж╛ржмрзЗржЗ results ржлрж┐рж▓рзНржб ржирж╛ ржпрж╛ржпрж╝
    const { results, ...dataToSend } = updatedData;

    console.log("Updating quiz with ID:", id);

    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ID-ржПрж░ ржХрзБржЗржЬ рж░рзЗржХрж░рзНржбржЯрж┐ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const response = await axios.patch(
        // ржЖржВрж╢рж┐ржХ ржЖржкржбрзЗржЯрзЗрж░ ржЬржирзНржп PATCH ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛ
        `${import.meta.env.VITE_API_URL}/quizzes/${id}`, // URL-ржП ржХрзБржЗржЬ ID ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        dataToSend // рж╢рзБржзрзБ ржХрзБржЗржЬрзЗрж░ ржирж╛ржо, ржкрзНрж░рж╢рзНржи ржЗрждрзНржпрж╛ржжрж┐рж░ ржбрзЗржЯрж╛ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      );

      // 2. API ржерзЗржХрзЗ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛ ржХрзБржЗржЬ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ ржирзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      const updatedQuiz = response.data;

      // 3. тЬи ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (Functional Update) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ:
      //    ржкрзБрж░рзЛржирзЛ ржХрзБржЗржЬржЯрж┐ржХрзЗ ржирждрзБржи ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛ ржХрзБржЗржЬ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗред
      setQuizzes((prevQuizzes) =>
        prevQuizzes.map((q) =>
          // ржпржжрж┐ ржХрзБржЗржЬрзЗрж░ ID ржорзНржпрж╛ржЪ ржХрж░рзЗ, рждржмрзЗ ржирждрзБржи ржбрзЗржЯрж╛ ржжрж┐рзЯрзЗ ржкрзНрж░рждрж┐рж╕рзНржерж╛ржкржи ржХрж░рж╛ рж╣ржмрзЗ
          q._id === id ? updatedQuiz : q
        )
      );

      // 4. ржЖржкржбрзЗржЯ рж╣ржУрзЯрж╛ ржХрзБржЗржЬ ржЕржмржЬрзЗржХрзНржЯржЯрж┐ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      return updatedQuiz;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error(
        `API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржХрзБржЗржЬ ID: ${id} ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:`,
        error
      );
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  // const deleteQuiz = (id) => {
  //   // TODO: Replace with API later
  //   setQuizzes(quizzes.filter((q) => q.id !== id));
  // };

  const deleteQuiz = async (id) => {
    // ржПржЦрж╛ржирзЗ id рж╣рж▓рзЛ ржХрзБржЗржЬ рж░рзЗржХрж░рзНржбрзЗрж░ _id

    try {
      // 1. API ржХрж▓ ржХрж░рзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ID-ржПрж░ ржХрзБржЗржЬ рж░рзЗржХрж░рзНржбржЯрж┐ ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      await axios.delete(
        `${import.meta.env.VITE_API_URL}/quizzes/${id}` // URL-ржП ржХрзБржЗржЬ ID ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      );

      // API ржерзЗржХрзЗ рж╕рж╛ржзрж╛рж░ржгржд ржбрж┐рж▓рж┐ржЯ рж░рзЗржЬрж╛рж▓рзНржЯ ржЖрж╕рзЗ, ржХрж┐ржирзНрждрзБ рж╕ржлрж▓ рж╣рж▓рзЗ ржлрзНрж░ржирзНржЯржПржирзНржб рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ ржХрж░ржмрзЗ

      // 2. тЬи ржлрж╛ржВрж╢ржирж╛рж▓ ржЖржкржбрзЗржЯ (Functional Update) ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ рж╕рзНржЯрзЗржЯ ржЖржкржбрзЗржЯ:
      //    ржбрж┐рж▓рж┐ржЯ рж╣ржУрзЯрж╛ ржХрзБржЗржЬржЯрж┐ржХрзЗ 'quizzes' ржЕрзНржпрж╛рж░рзЗ ржерзЗржХрзЗ ржмрж╛ржж ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗред
      setQuizzes(
        (prevQuizzes) => prevQuizzes.filter((q) => q._id !== id) // MongoDB-ржПрж░ ржЬржирзНржп _id ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛ
      );

      // 3. ржбрж┐рж▓рж┐ржЯ рж╕ржлрж▓ рж╣ржпрж╝рзЗржЫрзЗ ржмрзЛржЭрж╛ржирзЛрж░ ржЬржирзНржп ржХрж┐ржЫрзБ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗ (ржпрзЗржоржи: true)
      return true;
    } catch (error) {
      // API ржХрж▓рзЗ ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ, рждрж╛ ржПржЦрж╛ржирзЗ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рж╛ рж╣ржмрзЗ
      console.error(
        `API-ржПрж░ ржорж╛ржзрзНржпржорзЗ ржХрзБржЗржЬ ID: ${id} ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛рж░ рж╕ржоржпрж╝ рждрзНрж░рзБржЯрж┐:`,
        error
      );
      // рждрзНрж░рзБржЯрж┐ржЯрж┐ ржЖрж░ржУ ржкрзНрж░ржЪрж╛рж░ (propagate) ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      throw error;
    }
  };

  const submitQuiz = (quizId, studentId, score) => {
    // TODO: Replace with API later
    setQuizzes(
      quizzes.map((q) => {
        if (q.id === quizId) {
          const newResult = {
            studentId,
            score,
            submittedAt: new Date().toISOString(),
          };
          return {
            ...q,
            results: [...q.results, newResult],
          };
        }
        return q;
      })
    );
  };

  // Context value
  const value = {
    // Dashboard
    isSideMenu,
    setIsSideMenu,

    // Auth
    currentUser,
    isAuthenticated,
    login,
    logout,

    // Data
    students,
    courses,
    batches,
    enrollments,
    payments,
    attendance,
    quizzes,
    loading,

    // CRUD Functions
    deleteQuiz,
    addQuiz,
    updateQuiz,
    addStudent,
    updateStudent,
    deleteStudent,
    addCourse,
    updateCourse,
    deleteCourse,
    addBatch,
    updateBatch,
    deleteBatch,
    enrollStudent,
    unenrollStudent,
    addPayment,
    updatePayment,
    addAttendance,
    updateAttendance,
    submitQuiz,
  };

  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
};
